protected Optional < String [ ] > function ( final HttpRequest arg0 ) { final ImmutableMap < String , String > headers = arg0 . getHeaders ( ) ; String [ ] extractedValues = from ( headers . entrySet ( ) ) . filter ( isForHeaderName ( name ) ) . transform ( toValue ( ) ) . toArray ( String . class ) ; if ( extractedValues . length > 0 ) { return of ( extractedValues ) ; } return absent ( ) ; }
public void function ( ) { Log log = LogFactory . getLog ( InvokeJCLTest . class ) ; Exception e = new Exception ( " just testing " ) ; log . trace ( " trace message " ) ; log . debug ( " debug message " ) ; log . info ( " info  message " ) ; log . warn ( " warn message " ) ; log . error ( " error message " ) ; log . fatal ( " fatal message " ) ; log . trace ( " trace message " , e ) ; log . debug ( " debug message " , e ) ; log . info ( " info  message " , e ) ; log . warn ( " warn message " , e ) ; log . error ( " error message " , e ) ; log . fatal ( " fatal message " , e ) ; }
private static void function ( Set < URL > arg0 ) { if ( arg0 . isEmpty ( ) ) { return ; } Util . report ( " Class path contains SLF4J bindings targeting slf4j-api versions prior to 1.8. " ) ; for ( URL path : arg0 ) { Util . report ( " Ignoring binding found at [ " + path + " ] " ) ; } Util . report ( " See  " + IGNORED_BINDINGS_URL + "  for an explanation. " ) ;
public void function ( ) { Document doc = Jsoup . parse ( " <p><i>Hello</i></p> " ) ; Element p = doc . selectFirst ( " p " ) ; Element i = doc . selectFirst ( " i " ) ; String pH = p . shallowClone ( ) . toString ( ) ; String iH = i . shallowClone ( ) . toString ( ) ; assertEquals ( " <p></p> " , pH ) ; assertEquals ( " <i></i> " , iH ) ; assertEquals ( p . outerHtml ( ) , p . toString ( ) ) ; assertEquals ( i . outerHtml ( ) , i . toString ( ) ) ; }
private void function ( String . . . arg0 ) { for ( int pos = stack . size ( ) - 1 ; pos > = 0 ; pos - - ) { Element next = stack . get ( pos ) ;
String function ( ) { String tempName = name ; String levelString = null ; int indexOfLastDot = tempName . length ( ) ; while ( ( levelString = = null ) & & ( indexOfLastDot > - 1 ) ) { tempName = tempName . substring ( 0 , indexOfLastDot ) ; levelString = CONFIG_PARAMS . getStringProperty ( SimpleLogger . LOG_KEY_PREFIX + tempName , null ) ; indexOfLastDot = String . valueOf ( tempName ) . lastIndexOf ( " . " ) ; } return levelString ; }
public void function ( final String arg0 , final int arg1 ) throws IOException { run ( new FileInputStream ( arg0 ) , arg1 ) ; fileMonitor . startMonitor ( new File ( arg0 ) , configurationChangeListener ( arg1 ) ) ; }
public void function ( Object arg0 ) { logger . log ( null , FQCN , LocationAwareLogger . INFO_INT , String . valueOf ( arg0 ) , null , null ) ; }
static Set < URL > function ( ) { Set < URL > staticLoggerBinderPathSet = new LinkedHashSet < URL > ( ) ; try { ClassLoader loggerFactoryClassLoader = LoggerFactory . class . getClassLoader ( ) ; Enumeration < URL > paths ; if ( loggerFactoryClassLoader = = null ) { paths = ClassLoader . getSystemResources ( STATIC_LOGGER_BINDER_PATH ) ; } else { paths = loggerFactoryClassLoader . getResources ( STATIC_LOGGER_BINDER_PATH ) ; } while ( paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; staticLoggerBinderPathSet . add ( path ) ; } } catch ( IOException ioe ) { Util . report ( " Error getting resources from path " , ioe ) ; } return staticLoggerBinderPathSet ; }
protected void function ( HttpServletRequest arg0 , HttpServletResponse arg1 ) throws ServletException , IOException { arg1 . setContentType ( TextHtml ) ; arg1 . setStatus ( HttpServletResponse . SC_OK ) ; String doc = " <p>Hello, World! " ; arg1 . getWriter ( ) . write ( doc ) ; }
public void function ( ) throws Exception { testProtocolRejection ( 0 , new Draft_6455 ( ) ) ; }
public void function ( int arg0 , String arg1 ) { close ( arg0 , arg1 , false ) ; }
public void function ( WebSocket arg0 , ClientHandshake arg1 ) { openCounter + + ; System . out . println ( " ///////////Opened connection number " + openCounter ) ; }
@Override public AuthenticationHandler function ( AuthenticationHandler arg0 ) { return arg0 ; }
public void function ( ) { Thread . currentThread ( ) . setName ( " WebSocketWriteThread- " + Thread . currentThread ( ) . getId ( ) ) ; try { runWriteData ( ) ;
private void function ( arg0 . arg1 . arg2 . Level arg3 , ResourceBundle arg4 , String arg5 , Throwable arg6 , Object . . . arg7 ) { String message = getResourceStringOrMessage ( arg4 , arg5 ) ; LoggingEventBuilder leb = slf4jLogger . makeLoggingEventBuilder ( arg3 ) ; if ( arg6 ! = null ) { leb = leb . setCause ( arg6 ) ; } if ( arg7 ! = null & & arg7 . length > 0 ) { for ( Object p : arg7 ) { leb = leb . addArgument ( p ) ; } message = String . format ( message , arg7 ) ; } if ( leb instanceof CallerBoundaryAware ) { CallerBoundaryAware cba = ( CallerBoundaryAware ) leb ; cba . setCallerBoundary ( PRESUMED_CALLER_BOUNDARY ) ; } leb . log ( message ) ; }
@Override public boolean function ( Element arg0 , Element arg1 ) { it . restart ( arg1 ) ; while ( it . hasNext ( ) ) { Element el = it . next ( ) ; if ( el = = arg1 ) continue ; if ( evaluator . matches ( arg1 , el ) ) return true ; } return false ; }
@Test public void function ( ) { String h = " <td>Hello<td><p>There<p>now " ; Document doc = Jsoup . parse ( h ) ; assertEquals ( " <table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table> " , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) ) ; }
public void function ( ) throws IOException { String url = " http://direct.infohound.net/tools/q.pl " ; Connection con = Jsoup . connect ( url ) ; con . get ( ) ; Connection . Response res = con . response ( ) ; assertEquals ( " text/html " , res . header ( " Content-Type " ) ) ; assertEquals ( " no-cache, no-store " , res . header ( " Cache-Control " ) ) ; List < String > header = res . headers ( " Cache-Control " ) ; assertEquals ( 2 , header . size ( ) ) ; assertEquals ( " no-cache " , header . get ( 0 ) ) ; assertEquals ( " no-store " , header . get ( 1 ) ) ; }
@Test public void function ( ) { String html = " <!doctype HTML><IMG ALT=One></DIV> " ; Document doc = Jsoup . parse ( html ) ; assertEquals ( " <!doctype html> <html> <head></head> <body> <img alt= \" One \" > </body> </html> " , StringUtil . normaliseWhitespace ( doc . outerHtml ( ) ) ) ; }
public T function ( String arg0 , String arg1 ) { Validate . notEmpty ( arg0 , " Header name must not be empty " ) ; Validate . notNull ( arg1 , " Header value must not be null " ) ; removeHeader ( arg0 ) ; addHeader ( arg0 , arg1 ) ; return ( T ) this ; }
public Entry < String , String > function ( ) { return new Attribute ( attr . getKey ( ) . substring ( dataPrefix . length ( ) ) , attr . getValue ( ) ) ; }
public void function ( ) throws Exception { Mp3File mp3File = new Mp3File ( new File ( MP3_WITH_ID3V1_AND_ID3V23_AND_CUSTOM_TAGS ) ) ; testShouldThrowExceptionIfSavingMp3WithSameNameAsSourceFile ( mp3File ) ; }
public void function ( ) throws Exception { MocoEventAction action = mock ( MocoEventAction . class ) ; server . request ( by ( uri ( " /noevent " ) ) ) . response ( " noevent " ) ; server . request ( by ( uri ( " /event " ) ) ) . response ( " foo " ) . on ( complete ( action ) ) ; running ( server , ( ) - > assertThat ( helper . get ( remoteUrl ( " /noevent " ) ) , is ( " noevent " ) ) ) ; verify ( action , Mockito . never ( ) ) . execute ( any ( Request . class ) ) ; }
public boolean function ( HttpRequest arg0 ) { try { JsonNode requestNode = mapper . readTree ( extractor . extract ( arg0 ) ) ;
boolean function ( ) { if ( isEmpty ( ) ) return false ; char c = input . charAt ( pos ) ; return ( c > = 'A' & & c < = 'Z' ) | | ( c > = 'a' & & c < = 'z' ) ; }
boolean function ( Token arg0 , HtmlTreeBuilder arg1 ) { arg1 . error ( this ) ; arg1 . setFosterInserts ( true ) ; arg1 . process ( arg0 , InBody ) ; arg1 . setFosterInserts ( false ) ; return true ; }
public final boolean function ( final Request arg0 ) { Optional < T > extractContent = extractor . extract ( arg0 ) ; if ( ! extractContent . isPresent ( ) ) { return false ; } T target = extractContent . get ( ) ; if ( target instanceof String ) { return predicate . test ( ( String ) target ) ; } if ( target instanceof String [ ] ) { String [ ] contents = ( String [ ] ) target ; return Arrays . stream ( contents ) . filter ( Objects : : nonNull ) . anyMatch ( predicate ) ; } if ( target instanceof MessageContent ) { MessageContent actualTarget = ( MessageContent ) target ; return predicate . test ( actualTarget . toString ( ) ) ; } return false ; }
protected String function ( Exception arg0 ) { String message = " [ " + arg0 . getClass ( ) . getName ( ) ; if ( arg0 . getMessage ( ) ! = null ) message + = " :  " + arg0 . getMessage ( ) ; message + = " ] " ; return message ; }
public void function ( ) { if ( thread = = null ) thread = Thread . currentThread ( ) ; interruptableRun ( ) ; try { selector . close ( ) ; } catch ( IOException e ) { onError ( e ) ; } closelock . lock ( ) ; selector = null ; closelock . unlock ( ) ; try { channel . close ( ) ; } catch ( IOException e ) { onError ( e ) ; } channel = null ; thread = null ; }
public void function ( ) { JSONObject testResult = jsonObject . getJSONObject ( " 5.16 " ) ; assertEquals ( " OK " , testResult . get ( " behavior " ) ) ; assertEquals ( " OK " , testResult . get ( " behaviorClose " ) ) ; Assume . assumeTrue ( " Duration:  " + testResult . getInt ( " duration " ) , testResult . getInt ( " duration " ) < 10 ) ; }
@Test public void function ( ) { Document doc = Jsoup . parse ( " 0<p>0</p> " ) ; assertEquals ( " 0 \ n<p>0</p> " , doc . body ( ) . html ( ) ) ; }
public void function ( String arg0 , Throwable arg1 ) { delegate ( ) . error ( arg0 , arg1 ) ; }
protected void function ( final HttpRequest arg0 , final MutableHttpResponse arg1 ) { Optional < URL > url = remoteUrl ( arg0 ) ; if ( ! url . isPresent ( ) ) { return ; } HttpResponse response = doProxy ( arg0 , url . get ( ) ) ; doWritHttpResponse ( response , arg1 ) ; }
protected String function ( String arg0 ) throws NumberFormatException { String value = arg0 . trim ( ) ; if ( value . length ( ) > 0 ) { if ( value . charAt ( 0 ) = = '(' ) { int pos = value . indexOf ( ')' ) ; if ( pos > 0 ) { return value . substring ( pos + 1 ) ; } } return value ; } return null ; }
private HttpServer function ( List < ? extends InputStream > arg0 , int arg1 ) { HttpServer server = createBaseHttpServer ( arg0 , arg1 ) ; server . request ( by ( uri ( " /favicon.ico " ) ) ) . response ( content ( pathResource ( " favicon.png " ) ) , header ( " Content-Type " , " image/png " ) ) ; return server ; }
private void function ( final ObjectOutputStream arg0 ) throws IOException { arg0 . defaultWriteObject ( ) ; arg0 . writeInt ( level ) ; arg0 . writeInt ( syslogEquivalent ) ; arg0 . writeUTF ( levelStr ) ; }
public void function ( ) { ID3v2ChapterFrameData frameData = new ID3v2ChapterFrameData ( false ) ; frameData . setStartOffset ( 9 ) ; assertEquals ( 9 , frameData . getStartOffset ( ) ) ; }
public void function ( ) throws IOException { runWithConfiguration ( " foo.json " ) ; org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " /cookie " ) ) ; String value = response . getFirstHeader ( HttpHeaders . SET_COOKIE ) . getValue ( ) ; Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; }
public void function ( ) throws Exception { String imageFilename = " test-res/Some Artist - Some Album.png " ; tryAddImage ( TEST_FILE_WITH_IMAGE_WITH_ARTIST_AND , imageFilename ) ; }
public void function ( ) { slf4jMessageFormatter ( RUN_LENGTH ) ; double avgDuration = slf4jMessageFormatter ( RUN_LENGTH ) ; long referencePerf = 1700 ; BogoPerf . assertDuration ( avgDuration , referencePerf , REFERENCE_BIPS ) ; }
protected void function ( ) throws Exception { super . tearDown ( ) ; SLF4JBridgeHandler . uninstall ( ) ; fileAppender . close ( ) ; log4jRoot . getLoggerRepository ( ) . resetConfiguration ( ) ; for ( int i = 0 ; i < existingHandlers . length ; i + + ) { julRootLogger . addHandler ( existingHandlers [ i ] ) ;
public boolean function ( ) { return logger . isLoggable ( Level . FINEST ) ; }
public void function ( Object arg0 ) { logger . log ( null , FQCN , LocationAwareLogger . ERROR_INT , String . valueOf ( arg0 ) , null ) ; }
protected void function ( ChannelBuffer arg0 ) { arg0 . writeBytes ( contents [ current ( ) ] . getBytes ( ) ) ; }
public void function ( ) throws Exception { server . response ( version ( VERSION_1_0 ) ) ; running ( server , ( ) - > { ProtocolVersion version = helper . getResponse ( root ( ) ) . getProtocolVersion ( ) ;
public RunnerSetting function ( InputStream arg0 ) { return new RunnerSetting ( arg0 , null ) ; }
public Whitelist function ( String arg0 , String arg1 , String arg2 ) { super . addEnforcedAttribute ( arg0 , arg1 , arg2 ) ; return this ; }
@Test void function ( ) { String html = " <table>foo<tr>bar<td>baz</td>qux</tr>coo</table> " ; Document doc = Jsoup . parse ( html , TrackingHtmlParser ) ; StringBuilder track = new StringBuilder ( ) ; List < TextNode > textNodes = doc . nodeStream ( TextNode . class ) . peek ( node - > accumulatePositions ( node , track ) ) . collect ( Collectors . toList ( ) ) ; assertEquals ( 5 , textNodes . size ( ) ) ; assertEquals ( " foo " , textNodes . get ( 0 ) . text ( ) ) ; assertEquals ( " bar " , textNodes . get ( 1 ) . text ( ) ) ; assertEquals ( " baz " , textNodes . get ( 2 ) . text ( ) ) ; assertEquals ( " qux " , textNodes . get ( 3 ) . text ( ) ) ; assertEquals ( " coo " , textNodes . get ( 4 ) . text ( ) ) ; assertEquals ( " #text:7-10; #text:14-17; #text:21-24; #text:29-32; #text:37-40;  " , track . toString ( ) ) ; }
public String function ( String arg0 ) { return headers . get ( arg0 ) ; }
public FilterResult function ( Node arg0 , int arg1 ) { if ( arg0 . hasAttributes ( ) ) { found [ 0 ] = true ;
public void function ( ) { FileResourceReader reader = new FileResourceReader ( text ( new File ( " src/test/resources/foo.response " ) . getPath ( ) ) ) ; assertThat ( reader . readFor ( ( Request ) null ) . toString ( ) , is ( " foo.response " ) ) ; }
public Setting function ( RequestMatcher arg0 ) { return this . onRequestAttached ( arg0 ) ; }
protected final MessageContent function ( final HttpRequest arg0 ) { HttpRequest recordedRequest = getRequiredRecordedRequest ( arg0 ) ; return modifier . getMessageContent ( recordedRequest ) ; }
private static Map < Character , String > function ( Map < String , Character > arg0 ) { Map < Character , String > outMap = new HashMap < Character , String > ( ) ; for ( Map . Entry < String , Character > entry : arg0 . entrySet ( ) ) { Character character = entry . getValue ( ) ; String name = entry . getKey ( ) ; if ( outMap . containsKey ( character ) ) { if ( name . toLowerCase ( ) . equals ( name ) ) outMap . put ( character , name ) ; } else { outMap . put ( character , name ) ; } } return outMap ; }
public void function ( ) { XLogger logger = XLoggerFactory . getXLogger ( " UnitTest " ) ; logger . entry ( ) ; logger . entry ( 1 ) ; logger . entry ( " test " ) ; assertEquals ( 3 , listAppender . list . size ( ) ) ; verify ( ( LoggingEvent ) listAppender . list . get ( 0 ) , " entry " ) ; verify ( ( LoggingEvent ) listAppender . list . get ( 1 ) , " entry with (1) " ) ; verify ( ( LoggingEvent ) listAppender . list . get ( 2 ) , " entry with (test) " ) ; }
Token function ( ) { reset ( data ) ; dataS = null ; bogus = false ; return this ; }
private MocoConfig [ ] function ( RunnerSetting arg0 ) { ImmutableList . Builder < MocoConfig > builder = ImmutableList . builder ( ) ; addConfig ( builder , arg0 . context ( ) ) ; addConfig ( builder , arg0 . fileRoot ( ) ) ; addConfig ( builder , arg0 . response ( ) ) ; return toArray ( builder . build ( ) , MocoConfig . class ) ; }
public String function ( ) { return String . format ( " :parent%s " , sel ) ; }
public static HttpServer function ( final int arg0 , final MocoConfig . . . arg1 ) { return httpServer ( arg0 , arg1 ) ; }
public ResponseHandler function ( final MocoConfig arg0 ) { ResponseHandler handler = super . apply ( arg0 ) ; if ( handler ! = this ) { return handler ; } Resource resource = this . resource . apply ( arg0 ) ; if ( resource ! = this . resource ) { return new ContentHandler ( ( ContentResource ) resource ) ; } return this ; }
public void function ( ) throws IOException , NoSuchTagException , UnsupportedTagException , InvalidDataException { byte [ ] buffer = loadFile ( " test-res/v1andv24tags.mp3 " ) ; ID3v2 id3v2tag = ID3v2TagFactory . createTag ( buffer ) ; assertEquals ( " 4.0 " , id3v2tag . getVersion ( ) ) ; assertEquals ( 0x44B , id3v2tag . getLength ( ) ) ; }
public String function ( Map . Entry < String , String > arg0 ) { return arg0 . getValue ( ) ; }
private HttpServer function ( List < SessionSetting > arg0 , int arg1 , MocoConfig . . . arg2 ) { HttpServer server = new ActualHttpServer ( arg1 , arg2 ) ; for ( SessionSetting session : arg0 ) { logger . debug ( " Parse session: {} " , session ) ; if ( session . isMount ( ) ) { MountSetting mount = session . getMount ( ) ; server . mount ( mount . getDir ( ) , to ( mount . getUri ( ) ) , mount . getMountPredicates ( ) ) ; } else if ( session . isAnyResponse ( ) ) { server . response ( session . getResponseHandler ( ) ) ; } else if ( session . isRedirectResponse ( ) ) { server . request ( session . getRequestMatcher ( ) ) . redirectTo ( session . getRedirectTo ( ) ) ; } else { server . request ( session . getRequestMatcher ( ) ) . response ( session . getResponseHandler ( ) ) ; } } return server ; }
public void function ( ) { UnsupportedTagException exception = new UnsupportedTagException ( ) ; assertNull ( exception . getMessage ( ) ) ; assertNull ( exception . getCause ( ) ) ; }
List < Node > function ( String arg0 , String arg1 , ParseErrorList arg2 , ParseSettings arg3 ) { initialiseParse ( arg0 , arg1 , arg2 , arg3 ) ; runParser ( ) ; return doc . childNodes ( ) ; }
public static WritableResource function ( String arg0 ) { checkNotNull ( arg0 , " Null filename is not allowed " ) ; File file = new File ( arg0 ) ; return new FileResource ( file ) ; }
public static ActualHttpServer function ( final Optional < Integer > arg0 , final MocoConfig . . . arg1 ) { return createHttpServerWithMonitor ( arg0 . or ( 0 ) , new Slf4jMonitor ( new HttpRequestDumper ( ) , new HttpResponseDumper ( ) ) , arg1 ) ;
public static String function ( byte [ ] arg0 ) { String encoded = null ; try { encoded = encodeBytes ( arg0 , 0 , arg0 . length , NO_OPTIONS ) ; } catch ( java . io . IOException ex ) { assert false : ex . getMessage ( ) ; } assert encoded ! = null ; return encoded ; }
private < T extends SimpleRestSetting > Iterable < T > function ( final Iterable < RestSetting > arg0 , final Class < T > arg1 , final HttpMethod arg2 ) { return filter ( arg0 , arg1 ) . stream ( ) . filter ( input - > input . isSimple ( ) & & input . isFor ( arg2 ) )
public static void function ( ) throws SecurityException { java . util . logging . Logger rootLogger = getRootLogger ( ) ; Handler [ ] handlers = rootLogger . getHandlers ( ) ; for ( Handler handler : handlers ) { if ( handler instanceof SLF4JBridgeHandler ) {
public void function ( Level arg0 , Throwable arg1 ) { if ( instanceofLAL ) { ( ( LocationAwareLogger ) logger ) . log ( THROWING_MARKER , FQCN ,
protected void function ( ) throws Exception { removeHandlers ( Logger . getLogger ( " TEST " ) ) ; super . tearDown ( ) ; }
private Level function ( int arg0 ) { Level log4jLevel ; switch ( arg0 ) { case LocationAwareLogger . TRACE_INT : log4jLevel = traceCapable ? Level . TRACE : Level . DEBUG ; break ; case LocationAwareLogger . DEBUG_INT : log4jLevel = Level . DEBUG ; break ; case LocationAwareLogger . INFO_INT : log4jLevel = Level . INFO ; break ; case LocationAwareLogger . WARN_INT : log4jLevel = Level . WARN ; break ; case LocationAwareLogger . ERROR_INT : log4jLevel = Level . ERROR ; break ; default : throw new IllegalStateException ( " Level number  " + arg0 + "  is not recognized. " ) ; } return log4jLevel ; }
public void function ( ) throws Exception { server . request ( by ( uri ( " /template " ) ) ) . response ( template ( " ${foo} ${bar} " , " foo " , " ANOTHER " , " bar " , " TEMPLATE " ) ) ; running ( server , ( ) - > assertThat ( helper . get ( remoteUrl ( " /template " ) ) , is ( " ANOTHER TEMPLATE " ) ) ) ; }
private void function ( SeekableByteChannel arg0 ) throws IOException { int bufferLength = ( int ) ( getLength ( ) - ( endOffset + 1 ) ) ; if ( hasId3v1Tag ( ) ) bufferLength - = ID3v1Tag . TAG_LENGTH ; if ( bufferLength < = 0 ) { customTag = null ;
public int function ( Object arg0 ) { String oIndex = ( ( PatternWrapper ) arg0 ) . index ; return this . index . compareTo ( oIndex ) ; }
public static String function ( Document arg0 , arg1 Map < String , String > arg2 ) { try { DOMSource domSource = new DOMSource ( arg0 ) ;
public void function ( ) throws Exception { PlainA pojo = new PlainA ( ) ; pojo . code = 1 ; pojo . message = " message " ; server . request ( json ( pojo ) ) . response ( " foo " ) ; running ( server , new Runnable ( ) { @Override
@Test public void function ( ) throws IOException { Document doc = Jsoup . connect ( " http://infohound.net/tools/302-escaped.pl " ) . get ( ) ; assertEquals ( " http://infohound.net/tools/q.pl?q=one%20two " , doc . location ( ) ) ; doc = Jsoup . connect ( " http://infohound.net/tools/302-white.pl " ) . get ( ) ; assertEquals ( " http://infohound.net/tools/q.pl?q=one%20two " , doc . location ( ) ) ; }
public void function ( WebSocket arg0 , ClientHandshake arg1 ) { arg0 . setAttachment ( index ) ; index + + ; System . out . println ( arg0 . getRemoteSocketAddress ( ) . getAddress ( ) . getHostAddress ( ) + "  entered the room! ID:  "
public static RequestMatcher function ( final RequestMatcher . . . arg0 ) { return new OrRequestMatcher ( copyOf ( checkNotNull ( arg0 , " Matcher should not be null " ) ) ) ; }
public void function ( ) { String t = " <textarea>one < two </TEXTarea> third </TEXTarea> " ; TokenQueue tq = new TokenQueue ( t ) ; String data = tq . chompToIgnoreCase ( " </textarea> " ) ; assertEquals ( " <textarea>one < two  " , data ) ; data = tq . chompToIgnoreCase ( " </textarea> " ) ; assertEquals ( "  third  " , data ) ; }
public void function ( ) { radioJCL . setEnabled ( false ) ; radioLog4j . setEnabled ( false ) ; browseButton . setEnabled ( false ) ; folderTextField . setEnabled ( false ) ; awareCheckBox . setEnabled ( false ) ; migrateButton . setText ( " Migration in progress " ) ; migrateButton . setEnabled ( false ) ;
public void function ( ) throws Exception { ID3v2PopmFrameData iD3v2PopmFrameData1 = new ID3v2PopmFrameData ( false , 1 ) ; iD3v2PopmFrameData1 . setAddress ( " Address1 " ) ; ID3v2PopmFrameData iD3v2PopmFrameData2 = new ID3v2PopmFrameData ( false , 1 ) ; iD3v2PopmFrameData1 . setAddress ( " Address2 " ) ; assertFalse ( iD3v2PopmFrameData1 . equals ( iD3v2PopmFrameData2 ) ) ; }
public void function ( ) { nodelistChanged ( ) ; }
public void function ( ) throws Exception { server = httpServer ( port ( ) , request ( eq ( header ( " foo " ) , " bar " ) ) ) ; server . response ( text ( " blah " ) ) ; running ( server , new Runnable ( ) { @Override
public OutputSettings function ( ) { OutputSettings clone ; try { clone = ( OutputSettings ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( e ) ; } clone . charset ( charset . name ( ) ) ; clone . escapeMode = Entities . EscapeMode . valueOf ( escapeMode . name ( ) ) ; return clone ; }
protected void function ( final HttpRequest arg0 , final MutableHttpResponse arg1 ) { String value = resource . readFor ( arg0 ) . toString ( ) ; arg1 . addHeader ( name , value ) ; }
static SLF4JServiceProvider function ( ClassLoader arg0 ) { String explicitlySpecified = System . getProperty ( PROVIDER_PROPERTY_KEY ) ; if ( null = = explicitlySpecified | | explicitlySpecified . isEmpty ( ) ) { return null ; } try { String message = String . format ( " Attempting to load provider  \" %s \"  specified via  \" %s \"  system property " , explicitlySpecified , PROVIDER_PROPERTY_KEY ) ;
public void function ( ) { JSONObject testResult = jsonObject . getJSONObject ( " 6.10.3 " ) ; assertEquals ( " OK " , testResult . get ( " behavior " ) ) ; assertEquals ( " OK " , testResult . get ( " behaviorClose " ) ) ; Assume . assumeTrue ( " Duration:  " + testResult . getInt ( " duration " ) , testResult . getInt ( " duration " ) < 10 ) ;
public static Failover function ( final String arg0 ) { return new DefaultFailover ( new File ( arg0 ) ) ; }
public void function ( arg0 . arg1 . arg2 . Document arg3 , Document arg4 ) { if ( ! StringUtil . isBlank ( arg3 . location ( ) ) ) arg4 . setDocumentURI ( arg3 . location ( ) ) ; arg0 . arg1 . arg2 . Element rootEl = arg3 . child ( 0 ) ; NodeTraversor traversor = new NodeTraversor ( new W3CBuilder ( arg4 ) ) ; traversor . traverse ( rootEl ) ; }
public void function ( String arg0 ) { Map map = ( Map ) inheritableThreadLocal . get ( ) ; if ( map ! = null ) { map . remove ( arg0 ) ;
final boolean function ( ) { if ( siblingIndex = = 0 ) return true ; if ( siblingIndex = = 1 ) { final Node prev = previousSibling ( ) ; return prev instanceof TextNode & & ( ( ( TextNode ) prev ) . isBlank ( ) ) ; } return false ; }
public static ResponseHandler function ( final ProxyConfig arg0 ) { return proxy ( checkNotNull ( arg0 ) , Failover . DEFAULT_FAILOVER ) ; }
public static void function ( final String arg0 , final HttpResponse arg1 ) { HttpEntity entity = arg1 . getEntity ( ) ; MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; assertThat ( mediaType . type ( ) , is ( " application " ) ) ; assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; try { JSONAssert . assertEquals ( arg0 ,
public void function ( final SessionContext arg0 ) { HttpRequest request = arg0 . getRequest ( ) ; Optional < URL > url = remoteUrl ( ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ) ; if ( ! url . isPresent ( ) ) { return ; } writeResponse ( arg0 . getResponse ( ) , doProxy ( request , url . get ( ) ) ) ; }
private HttpServer function ( List < SessionSetting > arg0 , int arg1 ) { HttpServer server = new HttpServer ( arg1 ) ; for ( SessionSetting session : arg0 ) { logger . debug ( " Parse session: {} " , session ) ; if ( session . isMount ( ) ) { MountSetting mount = session . getMount ( ) ; server . mount ( mount . getDir ( ) , to ( mount . getUri ( ) ) , mount . getMountPredicates ( ) ) ; } else if ( session . isAnyResponse ( ) ) { server . response ( session . getResponseHandler ( ) ) ; } else if ( session . isRedirectResponse ( ) ) { server . request ( requestMatcherParser . createRequestMatcher ( session . getRequest ( ) ) ) . redirectTo ( session . getRedirectTo ( ) ) ; } else { server . request ( requestMatcherParser . createRequestMatcher ( session . getRequest ( ) ) ) . response ( session . getResponseHandler ( ) ) ; } } return server ; }
public void function ( String arg0 , Object arg1 , Object arg2 ) { recordEvent2Args ( Level . INFO , null , arg0 , arg1 , arg2 ) ; }
